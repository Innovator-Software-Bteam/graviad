{"version":3,"file":"static/js/881.836a5523.chunk.js","mappings":"qRAgBO,SAASA,EAAmBC,GAC/B,MAAMC,EAA4B,CAC9B,CACIC,OAAOC,EAAAA,EAAAA,KAACC,EAAmB,IAC3BC,IAAK,EACLC,IAAK,EACLC,MAAO,WACPC,UAAW,WAGnB,OACIL,EAAAA,EAAAA,KAAA,OAAKK,UAAW,gBAAgBC,SAC3BR,EAAOS,KAAI,CAACR,EAAOS,KAChBC,EAAAA,EAAAA,MAAA,OAEIJ,WAAWK,EAAAA,EAAAA,IACP,sBAAsB,aAADC,OACRZ,EAAMG,KAAG,aAAAS,OACTZ,EAAMI,KACnBJ,EAAMa,SAAO,YAAAD,OAAgBZ,EAAMa,SACnCb,EAAMc,SAAO,YAAAF,OAAgBZ,EAAMc,SACnCd,EAAMM,WACRC,SAAA,EACFN,EAAAA,EAAAA,KAACc,EAAAA,WAAU,CAACC,QAAS,KAAMV,UAAW,mCAAmCC,SACpEP,EAAMK,QAEVL,EAAMA,QAZFS,MAiBzB,CAEO,SAASP,IACZ,MAAMe,GAAOC,EAAAA,EAAAA,OACP,MAACC,EAAK,KAAEC,IAAQC,EAAAA,EAAAA,OACfC,EAAUC,IAAeC,EAAAA,EAAAA,UAAsB,KAC/CC,EAAkBC,IAAuBF,EAAAA,EAAAA,UAAoB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACzFG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAkB,GAuBpD,OAHAK,EAAAA,EAAAA,YAAU,KAnBWC,WAAa,IAADC,EAC7BH,GAAa,SACPI,EAAAA,EAAMC,IAAI,GAADrB,OAAIsB,EAAAA,EAAOC,OAAOC,IAAG,aAAa,CAC7CC,iBAAiB,EACjBC,OAAQ,CACJC,MAAO,CACHC,WAAgB,OAAJvB,QAAI,IAAJA,GAAc,QAAVc,EAAJd,EAAMwB,gBAAQ,IAAAV,OAAV,EAAJA,EAAgBW,OAInCC,MAAKC,IACFrB,EAAYqB,EAAIC,MAChBjB,GAAa,EAAM,IAEtBkB,OAAMC,IACH3B,EAAK,0CAA2C,SAChDQ,GAAa,EAAM,GACrB,EAGNoB,GAAeL,OAAOG,OAAO,GAC9B,IACqB,IAApBxB,EAAS2B,QAAiBtB,EAmBzBV,GAmBDP,EAAAA,EAAAA,MAAA,OAAKJ,WAAWK,EAAAA,EAAAA,IACZ,OACA,SACA,iDACA,kBACFJ,SAAA,CACGoB,GAAaF,EAAiBjB,KAAI,CAAC0C,EAAGzC,KACnCR,EAAAA,EAAAA,KAACkD,EAAAA,GAAmB,GAAM1C,MAE5BkB,GAAaL,EAASd,KAAK4C,IACzBnD,EAAAA,EAAAA,KAACoD,EAAAA,GAAQ,CAACC,OAAQ,IAAMC,gBAAiB,gBAAgBhD,UACrDN,EAAAA,EAAAA,KAACuD,EAAAA,GAAW,CAAkBd,GAAIU,EAAQV,IAAxBU,EAAQV,KADiCU,EAAQV,UA3B3EzC,EAAAA,EAAAA,KAAA,OAAKK,WAAWK,EAAAA,EAAAA,IACZ,OACA,iBACA,eACA,iBACFJ,UACEG,EAAAA,EAAAA,MAACK,EAAAA,WAAU,CACPC,QAAS,YACTV,WAAWK,EAAAA,EAAAA,IACP,2DACFJ,SAAA,CAAC,WACIN,EAAAA,EAAAA,KAAA,QAAMK,UAAW,wEAAwEC,SAAC,UAAY,+BA9BrHN,EAAAA,EAAAA,KAAA,OAAKK,WAAWK,EAAAA,EAAAA,IACZ,OACA,iBACA,eACA,iBACFJ,UACEG,EAAAA,EAAAA,MAACK,EAAAA,WAAU,CACPC,QAAS,YACTV,WAAWK,EAAAA,EAAAA,IACP,2DACFJ,SAAA,CAAC,oCAC6BN,EAAAA,EAAAA,KAAA,SAAK,UAC/BA,EAAAA,EAAAA,KAAA,QAAMK,UAAW,wEAAwEC,SAAC,cAAgB,oCAyCpI,C","sources":["grvd/pages/Dashboard/account/AccountProductPage.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {TProduct} from \"grvd\";\r\nimport axios from \"axios\";\r\nimport config from \"../../../../config\";\r\nimport {twJoin} from \"tailwind-merge\";\r\nimport LazyLoad from \"react-lazyload\";\r\nimport {ProductCard, ProductCardSkeleton} from \"grvd/molecules\";\r\nimport {useUser} from \"grvd/contexts\";\r\nimport {Typography} from \"@material-tailwind/react\";\r\nimport {TDashboardBoard} from \"grvd/pages\";\r\nimport {useDialog} from \"grvd/organisms/Dialog\";\r\n\r\nexport interface IAccountProductPageProps extends React.ComponentProps<'div'> {\r\n\r\n}\r\n\r\nexport function AccountProductPage(props: IAccountProductPageProps) {\r\n    const boards: TDashboardBoard[] = [\r\n        {\r\n            board: <AccountProductBoard/>,\r\n            col: 1,\r\n            row: 1,\r\n            title: 'Products',\r\n            className: 'h-full',\r\n        },\r\n    ];\r\n    return (\r\n        <div className={'w-full h-full'}>\r\n            {boards.map((board, index) => (\r\n                <div\r\n                    key={index}\r\n                    className={twJoin(\r\n                        'flex flex-col gap-4',\r\n                        `col-start-${board.col}`,\r\n                        `row-start-${board.row}`,\r\n                        board.colSpan && `col-span-${board.colSpan}`,\r\n                        board.rowSpan && `row-span-${board.rowSpan}`,\r\n                        board.className,\r\n                    )}>\r\n                    <Typography variant={'h4'} className={'text-grvd-theme-sys-dark-primary'}>\r\n                        {board.title}\r\n                    </Typography>\r\n                    {board.board}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function AccountProductBoard() {\r\n    const user = useUser();\r\n    const {close, open} = useDialog();\r\n    const [products, setProducts] = useState<TProduct []>([]);\r\n    const [productSkeletons, setProductSkeletons] = useState<number []>([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const loadProducts = async () => {\r\n        setIsLoading(true);\r\n        await axios.get(`${config.server.url}/products`, {\r\n            withCredentials: true,\r\n            params: {\r\n                where: {\r\n                    merchantId: user?.merchant?.id,\r\n                }\r\n            }\r\n        })\r\n            .then(res => {\r\n                setProducts(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                open('Something went wrong. Please try again!', 'error');\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n    useEffect(() => {\r\n        loadProducts().then().catch();\r\n    }, []);\r\n    if (products.length === 0 && !isLoading) {\r\n        return (\r\n            <div className={twJoin(\r\n                'flex',\r\n                'justify-center',\r\n                'items-center',\r\n                'w-full h-full',\r\n            )}>\r\n                <Typography\r\n                    variant={'paragraph'}\r\n                    className={twJoin(\r\n                        'text-grvd-theme-sys-dark-on-primary-variant text-center',\r\n                    )}>\r\n                    You don't have any products yet.<br/>\r\n                    Click <span className={'font-bold text-grvd-theme-sys-dark-on-primary p-1 rounded-sm bg-white'}>Create Ad</span> to create the first product.\r\n                </Typography>\r\n            </div>\r\n        );\r\n    }\r\n    if (!user) {\r\n        return (\r\n            <div className={twJoin(\r\n                'flex',\r\n                'justify-center',\r\n                'items-center',\r\n                'w-full h-full',\r\n            )}>\r\n                <Typography\r\n                    variant={'paragraph'}\r\n                    className={twJoin(\r\n                        'text-grvd-theme-sys-dark-on-primary-variant text-center',\r\n                    )}>\r\n                    Please <span className={'font-bold text-grvd-theme-sys-dark-on-primary p-1 rounded-sm bg-white'}>Login</span> to see your products.\r\n                </Typography>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className={twJoin(\r\n            'grid',\r\n            'gap-16',\r\n            'grid-cols-[repeat(auto-fit,minmax(300px,1fr))]',\r\n            'auto-rows-auto',\r\n        )}>\r\n            {isLoading && productSkeletons.map((_, index) => (\r\n                <ProductCardSkeleton key={index}/>\r\n            ))}\r\n            {!isLoading && products.map((product) => (\r\n                <LazyLoad offset={1000} classNamePrefix={'blur-[1000px]'} key={product.id}>\r\n                    <ProductCard key={product.id} id={product.id}/>\r\n                </LazyLoad>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n}"],"names":["AccountProductPage","props","boards","board","_jsx","AccountProductBoard","col","row","title","className","children","map","index","_jsxs","twJoin","concat","colSpan","rowSpan","Typography","variant","user","useUser","close","open","useDialog","products","setProducts","useState","productSkeletons","setProductSkeletons","isLoading","setIsLoading","useEffect","async","_user$merchant","axios","get","config","server","url","withCredentials","params","where","merchantId","merchant","id","then","res","data","catch","err","loadProducts","length","_","ProductCardSkeleton","product","LazyLoad","offset","classNamePrefix","ProductCard"],"sourceRoot":""}